<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Template 10 Help</title>
</head>
<body style="font-family: 'Segoe UI'; margin: 20px auto 20px auto; width: 800px;">
    <table cellpadding="10">
        <tr>
            <td width="50%" valign="top">
                <h3>Template 10 Help</h3>
                <h1>The Converters folder</h1>
                <ul>Value Converters are used in XAML data binding to change the output of a property to a more-desiarable string.</ul>
            </td>
            <td width="50%"></td>
        </tr>
        <tr>
            <td valign="top">
                <h2>What's a Converter?</h2>
                <p>
                    In XAML data binding, the default presentation of a property's value is the result of its [ToString] method.
                    Since, in .Net, every [class] inherits from [object] and since [object] ensures the [ToString] method,
                    it is the only reliable default XAML could use to present a value. In effect, XAML is using a default, built-in
                    Value Converter unless it is provided an alternate, custom Value Converter.
                </p>
                <p>
                    Sometimes a developer or designer wants a property's value presented in a way different than the default.
                    For example, in the case of a DateTime property the default format is "4/22/2015 4:09:39 PM". This
                    format may be accurate, but it is not friendly. What you might want is "April 22, 2015". To accomplish
                    this format in C#, you could use <span style="font-family: 'Courier New';">DateTime.ToString("m");</span>.
                    To accomplish it in XAML you use a Value Converter with the same C# logic inside.
                </p>
                <h2>IValueConverter</h2>
                <p>
                    A XAML Value Converter is just a C# class. It must implment [IValueConverter], which may be found in the
                    [Windows.UI.Xaml.Data] namespace. This interface requires the [Convert] and the [ConvertBack] methods,
                    though most converters do not implement the [ConvertBack] method. This is generally because they are
                    [readonly] operations; the [ConvertBack] method is only used when writing back to a property which is
                    an uncommon scenario for a value converter.
                </p>
                <p>
                    When XAML binds a property, it follows this process:
                    <ol>
                        <li>Read the property</li>
                        <li>Apply the default Value Converter</li>
                        <li>Present the result</li>
                    </ol>
                    With a Custom Value Converter, it follows this process:
                    <ol>
                        <li>Read the property</li>
                        <li>Pass the property value through the Custom Value Converter's [Convert] method</li>
                        <li>Present the result</li>
                    </ol>
                    This ability to inject into the presentation pipeline gives the developer
                    considerable control over the presentation of data.
                </p>
                <h2>Performance Caveat</h2>
                <p>
                    Value Converters, like any executing code, have a cost to process. As a result, it is generally not recommended
                    to use Custom Value Converters in repeating data, especially when the quantity of data is quite high. The reason
                    for this is that the Value Converter has to be instantiated for each item and creates a binding performance penalty.
                </p>
                <p>
                    Sometimes a value in repeating data needs to be converted before it is displayed. If this is the case, creating
                    a new property in the [Model] that handles the formatting is far more cost effective than using a Value Converter.
                    For example, you might have the property <span style="font-family: 'Courier New';">DateTime DueDate</span> but
                    will also create a companion, [readonly] property called <span style="font-family: 'Courier New';"> String DueDateFormatted</span>.
                    The C# syntax is nearly the same as the Value Converter. The developer simply trades the reusability
                    and declarability of a Value Converter for improved (or maintained) performance.
                </p>
            </td>
            <td valign="top" style="background-color: palegoldenrod;">
                <h2>This folder</h2>
                <p>
                    The following files represent the types used to implement the TODOAzureSample functionality in this template.
                    Each of the types in this folder are inside the [TODOAzureSample.Converters] namespace.
                </p>
                <ol start="1">
                    <li><b>DateTimeFormatConverter.cs</b></li>
                </ol>
                <p>
                    [DateTimeFormatConverter] is a one-way converter that takes a [DateTime] value and applies the
                    format string supplied in the [CommandParameter] argument. The incoming value must be
                    a [DateTime] and cannot be a [DateTime?].
                </p>
                <ul>
                    Format string <a href="https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx" target="_blank">reference</a>.
                </ul>
                <ol start="2">
                    <li><b>StateToStringConverter.cs</b></li>
                </ol>
                <p>
                    Unique to this application is the States ENUM (defined in /Models/States.cs) that represents
                    the current state of a TodoItem (defined in /Models/TodoItem.cs). One possible state, for example is
                    NotStarted. Notice how it has no space. The [StateToStringConverter] is a one-way converter that
                    takes a [State] value and returns a custom string, like "Not Started".
                </p>
                <ul>
                    Note: this converter does not apply localization the returned string. It is hard coded.
                </ul>
                <ol start="3">
                    <li><b>ValueWhenConverter.cs</b></li>
                </ol>
                <p>
                    The [ValueWhenConverter] is a powerful, reusable converter. It is a one-way converter that
                    accepts some variable value, testing it against its own [When] property using the [Equals]
                    method (which is defined on every object in .Net). If [Equals] returns true, it returns
                    its own [When] property. If it returns false, it returns its own [Otherwise] property.
                </p>
                <p>
                    Because the developer can define [Value], [When], and [Otherwise] this converter can be reused
                    to meet the requirements of several common (90%) scenarios such as "VisibleWhenFalse" or 
                    "VisibleWhenZero" or any other values that can be declared in XAML. As a result, the
                    [ValueWhenConverter] can resude the number of unique converters in a project. That being said,
                    it cannot meet every need and custom converters may still be necessary. 
                </p>
                Sample syntax
<pre>
&lt;c:valuewhenconverter 
        x:name="VisibleWhenZeroConverter"&gt;

    &lt;c:valuewhenconverter.when&gt;
        &lt;x:int32&gt;0&lt;/x:int32&gt;
    &lt;/c:valuewhenconverter.when&gt;

    &lt;c:valuewhenconverter.value&gt;
        &lt;visibility&gt;Visible&lt;/visibility&gt;
    &lt;/c:valuewhenconverter.value&gt;

    &lt;c:valuewhenconverter.otherwise&gt;
        &lt;visibility&gt;Collapsed&lt;/visibility&gt;
    &lt;/c:valuewhenconverter.otherwise&gt;

&lt;/c:valuewhenconverter&gt;
</pre>
            </td>
        </tr>
    </table>
    <h3>//End</h3>
</body>
</html>